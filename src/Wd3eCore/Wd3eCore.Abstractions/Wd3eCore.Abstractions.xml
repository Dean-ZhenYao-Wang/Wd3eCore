<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Wd3eCore.Abstractions</name>
    </assembly>
    <members>
        <member name="P:Wd3eCore.BackgroundTasks.BackgroundTaskSettings.IsReadonly">
            <summary>
            如果对象不能用于更新数据库，则为True。
            </summary>
        </member>
        <member name="T:Wd3eCore.Environment.Extensions.Features.IFeatureHash">
            <summary>
            此接口的实现提供对启用特性状态的有效访问，以便提供用于缓存的Hash。
            因为它的状态应该被缓存，所以实例不应该有任何状态，因此被声明为瞬态。
            </summary>
        </member>
        <member name="M:Wd3eCore.Environment.Extensions.Features.IFeatureHash.GetFeatureHashAsync">
            <summary>
            返回一个序列号，该序列号表示当前租户的可用特性列表。
            </summary>
            <returns>
             一个<see cref="T:System.Int32"/>值，该值在每次特性列表更改时都会更改。
            </returns>
        </member>
        <member name="M:Wd3eCore.Environment.Extensions.Features.IFeatureHash.GetFeatureHashAsync(System.String)">
            <summary>
            返回一个序列号，该序列号表示当前租户的可用特性列表。
            </summary>
            <returns>
            一个<see cref="T:System.Int32"/>值，该值在每次启用特定特性时都会更改。
            </returns>
        </member>
        <member name="T:Wd3eCore.Environment.Extensions.ITypeFeatureProvider">
            <summary>
            此服务的实现能够提供任何服务的"Feature"。
            </summary>
        </member>
        <member name="P:Wd3eCore.Environment.Extensions.IExtensionInfo.Id">
            <summary>
            扩展的id
            </summary>
        </member>
        <member name="P:Wd3eCore.Environment.Extensions.IExtensionInfo.SubPath">
            <summary>
            扩展的路径
            </summary>
        </member>
        <member name="P:Wd3eCore.Environment.Extensions.IExtensionInfo.Manifest">
            <summary>
            扩展的清单信息
            </summary>
        </member>
        <member name="P:Wd3eCore.Environment.Extensions.IExtensionInfo.Features">
            <summary>
            扩展中的特性列表
            </summary>
        </member>
        <member name="M:Wd3eCore.Environment.Extensions.Utility.DependencyOrdering.OrderByDependenciesAndPriorities``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean},System.Func{``0,System.Int32})">
            <summary>
            将依赖关系图线性化，使项的位置在其依赖关系之后。
            这是通过使用一个函数来确定一个项目是否直接依赖于另一个项目。
            然后，在不破坏依赖关系图的情况下，只要有可能，项目就会向上移动。
            这是通过使用一个函数来实现的，该函数为每个项目提供一个优先级作为一个订单值。
            </summary>
        </member>
        <member name="M:Wd3eCore.Environment.Cache.SignalExtensions.DeferredSignalToken(Wd3eCore.Environment.Cache.ISignal,System.String)">
            <summary>
            添加一个信号（如果还没有的话），将在shell作用域的末尾发送。
            </summary>
        </member>
        <member name="T:Wd3eCore.Environment.Shell.Builders.ICompositionStrategy">
            <summary>
            服务在主机级将可缓存的描述符转化为可加载的蓝图。
            </summary>
        </member>
        <member name="M:Wd3eCore.Environment.Shell.Builders.ICompositionStrategy.ComposeAsync(Wd3eCore.Environment.Shell.ShellSettings,Wd3eCore.Environment.Shell.Descriptor.Models.ShellDescriptor)">
            <summary>
            使用来自 IExtensionManager 的信息，转换并填充 shell 构建者,正确初始化租户 IoC 容器所需的所有蓝图模型。
            </summary>
        </member>
        <member name="T:Wd3eCore.Environment.Shell.Builders.IShellContextFactory">
            <summary>
            高级协调器，它使用其他组件功能，在给定租户设置的情况下为正在运行的shell构建所有构件。
            </summary>
        </member>
        <member name="M:Wd3eCore.Environment.Shell.Builders.IShellContextFactory.CreateShellContextAsync(Wd3eCore.Environment.Shell.ShellSettings)">
            <summary>
            根据特定的租户设置结构构建shell上下文
            </summary>
        </member>
        <member name="M:Wd3eCore.Environment.Shell.Builders.IShellContextFactory.CreateSetupContextAsync(Wd3eCore.Environment.Shell.ShellSettings)">
            <summary>
            为未初始化的Wd3e实例构建shell上下文。需要显示设置用户界面。
            </summary>
        </member>
        <member name="M:Wd3eCore.Environment.Shell.Builders.IShellContextFactory.CreateDescribedContextAsync(Wd3eCore.Environment.Shell.ShellSettings,Wd3eCore.Environment.Shell.Descriptor.Models.ShellDescriptor)">
            <summary>
            给定特性和参数的特定描述，构建shell上下文。
            Shell当前的实际描述符没有作用。不使用或更新描述符缓存。
            </summary>
        </member>
        <member name="M:Wd3eCore.Environment.Shell.Builders.IShellPipeline.Invoke(System.Object)">
            <summary>
            执行这个shell管道。
            </summary>
        </member>
        <member name="T:Wd3eCore.Environment.Shell.Builders.Models.ShellBlueprint">
            <summary>
            包含为特定租户初始化IoC容器所需的信息。
            这个模型由ICompositionStrategy创建，并传递到IShellContainerFactory。
            </summary>
        </member>
        <member name="T:Wd3eCore.Environment.Shell.Builders.ShellContext">
            <summary>
            shell上下文代表了shell的状态，在应用的整个生命周期内，shell的状态都是保持的
            </summary>
        </member>
        <member name="P:Wd3eCore.Environment.Shell.Builders.ShellContext.IsActivated">
            <summary>
            shell是否被激活。
            </summary>
        </member>
        <member name="P:Wd3eCore.Environment.Shell.Builders.ShellContext.Pipeline">
            <summary>
            为这个shell建造的管道。
            </summary>
        </member>
        <member name="M:Wd3eCore.Environment.Shell.Builders.ShellContext.PlaceHolder.#ctor">
            <summary>
            用作将被延迟创建的shell的占位符。
            </summary>
        </member>
        <member name="P:Wd3eCore.Environment.Shell.Builders.ShellContext.Released">
            <summary>
            是否尚未构建<see cref="T:Wd3eCore.Environment.Shell.Builders.ShellContext"/>实例或是否已释放该实例(例如，当租户发生更改时)。
            </summary>
        </member>
        <member name="P:Wd3eCore.Environment.Shell.Builders.ShellContext.ActiveScopes">
            <summary>
            返回此租户上活动作用域的数量。
            </summary>
        </member>
        <member name="M:Wd3eCore.Environment.Shell.Builders.ShellContext.Release">
            <summary>
            标志着<see cref="T:Wd3eCore.Environment.Shell.Builders.ShellContext"/>有一个候选者被释放。
            </summary>
        </member>
        <member name="M:Wd3eCore.Environment.Shell.Builders.ShellContext.AddDependentShell(Wd3eCore.Environment.Shell.Builders.ShellContext)">
            <summary>
            将指定的Shell上下文注册为依赖项，以便在重新加载当前Shell上下文时也重新加载它们。
            </summary>
        </member>
        <member name="T:Wd3eCore.Environment.Shell.Configuration.ShellConfiguration">
            <summary>
            持有租户<see cref="T:Microsoft.Extensions.Configuration.IConfiguration"/> ，
            它是由应用程序配置 "appsettings.json"、"App_Data/appsettings.json "文件
            和 "App_Data/Sites/{tenant}/appsettings.json "文件延迟建立的。
            </summary>
        </member>
        <member name="P:Wd3eCore.Environment.Shell.Configuration.ShellConfiguration.Configuration">
            <summary>
            租户延迟建立<see cref="T:Microsoft.Extensions.Configuration.IConfiguration"/>.
            </summary>
        </member>
        <member name="T:Wd3eCore.Environment.Shell.Descriptor.IShellDescriptorManager">
            <summary>
            服务从shell容器中解析出来。主要由主机使用。
            </summary>
        </member>
        <member name="M:Wd3eCore.Environment.Shell.Descriptor.IShellDescriptorManager.GetShellDescriptorAsync">
            <summary>
            使用shell特定的数据库或其他资源来返回当前的 "正确 "配置。
            主机将使用这些信息来重新初始化shell。
            </summary>
        </member>
        <member name="M:Wd3eCore.Environment.Shell.Descriptor.IShellDescriptorManager.UpdateShellDescriptorAsync(System.Int32,System.Collections.Generic.IEnumerable{Wd3eCore.Environment.Shell.Descriptor.Models.ShellFeature},System.Collections.Generic.IEnumerable{Wd3eCore.Environment.Shell.Descriptor.Models.ShellParameter})">
            <summary>
            修改数据库信息以匹配作为参数传递的信息。
            以前的SerialNumber用于乐观并发，如果存储中的数字与提供的数字不匹配，应该抛出异常。
            </summary>
        </member>
        <member name="T:Wd3eCore.Environment.Shell.Descriptor.Models.ShellDescriptor">
            <summary>
            包含租户启用的特性的快照。
            信息通过IShellDescriptorManager从shell中提取出来，并传递给ICompositionStrategy来构建shell蓝图
            </summary>
        </member>
        <member name="P:Wd3eCore.Environment.Shell.Descriptor.Models.ShellDescriptor.SerialNumber">
            <summary>
            获取或设置shell描述符的版本号。
            </summary>
        </member>
        <member name="P:Wd3eCore.Environment.Shell.Descriptor.Models.ShellDescriptor.Features">
            <summary>
            获取或设置shell中的特性列表。
            </summary>
        </member>
        <member name="P:Wd3eCore.Environment.Shell.Descriptor.Models.ShellDescriptor.Parameters">
            <summary>
            获取或设置特定于此shell的参数列表。
            </summary>
        </member>
        <member name="T:Wd3eCore.Environment.Shell.Descriptor.Models.ShellParameter">
            <summary>
            shell参数是可以分配给shell中特定组件的自定义值。
            </summary>
        </member>
        <member name="M:Wd3eCore.Environment.Shell.ShellHostExtensions.GetSettings(Wd3eCore.Environment.Shell.IShellHost,System.String)">
            <summary>
            检索与指定租户关联的shell设置。
            </summary>
            <returns>与租户关联的shell设置。</returns>
        </member>
        <member name="M:Wd3eCore.Environment.Shell.ShellHostExtensions.GetScopeAsync(Wd3eCore.Environment.Shell.IShellHost,System.String)">
            <summary>
            创建可用于解析本地服务的独立服务作用域。
            </summary>
            <param name="tenant">与要获取的服务作用域相关的租户名称。</param>
        </member>
        <member name="T:Wd3eCore.Environment.Shell.IShellDescriptorManagerEventHandler">
            <summary>
            表示shell描述符的事件处理程序。
            </summary>
        </member>
        <member name="M:Wd3eCore.Environment.Shell.IShellDescriptorManagerEventHandler.Changed(Wd3eCore.Environment.Shell.Descriptor.Models.ShellDescriptor,System.String)">
            <summary>
            当shell描述符发生变化时触发。
            </summary>
        </member>
        <member name="M:Wd3eCore.Environment.Shell.IShellHost.InitializeAsync">
            <summary>
            确保所有的<see cref="T:Wd3eCore.Environment.Shell.Builders.ShellContext"/>都是预先创建的，并且可用来处理请求。
            </summary>
        </member>
        <member name="M:Wd3eCore.Environment.Shell.IShellHost.GetOrCreateShellContextAsync(Wd3eCore.Environment.Shell.ShellSettings)">
            <summary>
            返回一个现有的<see cref="T:Wd3eCore.Environment.Shell.Builders.ShellContext"/>，或者在必要时创建一个新的。
            </summary>
            <param name="settings"><see cref="T:Wd3eCore.Environment.Shell.ShellSettings"/>对象代表要获取的shell。</param>
            <returns></returns>
        </member>
        <member name="M:Wd3eCore.Environment.Shell.IShellHost.GetScopeAsync(Wd3eCore.Environment.Shell.ShellSettings)">
            <summary>
            创建一个独立的服务作用域，可用于解析本地服务。
            </summary>
            <param name="settings"><see cref="T:Wd3eCore.Environment.Shell.ShellSettings"/>对象代表要获取的shell。</param>
        </member>
        <member name="M:Wd3eCore.Environment.Shell.IShellHost.UpdateShellSettingsAsync(Wd3eCore.Environment.Shell.ShellSettings)">
            <summary>
            更新现有的shell配置。
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:Wd3eCore.Environment.Shell.IShellHost.ReloadShellContextAsync(Wd3eCore.Environment.Shell.ShellSettings)">
            <summary>
            重载shell.
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:Wd3eCore.Environment.Shell.IShellHost.CreateShellContextAsync(Wd3eCore.Environment.Shell.ShellSettings)">
            <summary>
            创建一个新的 <see cref="T:Wd3eCore.Environment.Shell.Builders.ShellContext"/>。
            </summary>
            <param name="settings"><see cref="T:Wd3eCore.Environment.Shell.ShellSettings"/>对象代表要创建的shell。</param>
            <returns></returns>
        </member>
        <member name="M:Wd3eCore.Environment.Shell.IShellHost.ListShellContexts">
            <summary>
            列出所有可用的 <see cref="T:Wd3eCore.Environment.Shell.Builders.ShellContext"/>实例。
            一个shell可能已经被发布或尚未构建，
            如果是这样，'shell.Released'为true，'shell.CreateScope()'返回null，
            但仍然可以使用'GetScopeAsync(shell.Settings)'。
            </summary>
            <remarks>如果一个shell还没有被创建，比如说它已经被删除了，还没有被重新创建，可能就不会被列出。</remarks>
        </member>
        <member name="M:Wd3eCore.Environment.Shell.IShellHost.TryGetSettings(System.String,Wd3eCore.Environment.Shell.ShellSettings@)">
            <summary>
            尝试检索与指定租户相关的shell设置。
            </summary>
            <returns><c>true</c> 如果可以找到设置,则为true <c>false</c> 否则为false.</returns>
        </member>
        <member name="M:Wd3eCore.Environment.Shell.IShellHost.GetAllSettings">
            <summary>
            检索所有的shell设置。
            </summary>
            <returns>所有的shell设置。</returns>
        </member>
        <member name="M:Wd3eCore.Environment.Shell.IShellSettingsManager.CreateDefaultSettings">
            <summary>
            根据配置创建一个默认的shell设置。
            </summary>
        </member>
        <member name="M:Wd3eCore.Environment.Shell.IShellSettingsManager.LoadSettingsAsync">
            <summary>
            检索存储的所有shell设置。
            </summary>
            <returns>所有shell设置</returns>
        </member>
        <member name="M:Wd3eCore.Environment.Shell.IShellSettingsManager.LoadSettingsAsync(System.String)">
            <summary>
            检索给定租户的设置。
            </summary>
            <returns>shell设置</returns>
        </member>
        <member name="M:Wd3eCore.Environment.Shell.IShellSettingsManager.SaveSettingsAsync(Wd3eCore.Environment.Shell.ShellSettings)">
            <summary>
            将shell设置保存到存储中。
            </summary>
            <param name="settings">要存储的shell设置。</param>
        </member>
        <member name="T:Wd3eCore.Environment.Shell.Models.TenantState">
            <summary>
            租户的不同状态。
            </summary>
        </member>
        <member name="F:Wd3eCore.Environment.Shell.Models.TenantState.Uninitialized">
            <summary>
            租户还没有登记。
            </summary>
        </member>
        <member name="F:Wd3eCore.Environment.Shell.Models.TenantState.Initializing">
            <summary>
            正在初始化租户。
            </summary>
        </member>
        <member name="F:Wd3eCore.Environment.Shell.Models.TenantState.Running">
            <summary>
            租户已初始化并正在运行。
            </summary>
        </member>
        <member name="F:Wd3eCore.Environment.Shell.Models.TenantState.Disabled">
            <summary>
            已初始化并禁用了租户。
            </summary>
        </member>
        <member name="F:Wd3eCore.Environment.Shell.Models.TenantState.Invalid">
            <summary>
            租户设置无效。
            </summary>
        </member>
        <member name="T:Wd3eCore.Environment.Shell.Scope.ShellScope">
            <summary>
            管理shell状态和执行流的自定义'IServiceScope'。
            </summary>
        </member>
        <member name="P:Wd3eCore.Environment.Shell.Scope.ShellScope.Context">
            <summary>
            检索当前shell作用域的“ShellContext”。
            </summary>
        </member>
        <member name="P:Wd3eCore.Environment.Shell.Scope.ShellScope.Services">
            <summary>
            检索当前shell作用域的“IServiceProvider”。
            </summary>
        </member>
        <member name="P:Wd3eCore.Environment.Shell.Scope.ShellScope.Current">
            <summary>
            从异步流检索当前shell的作用域。
            </summary>
        </member>
        <member name="M:Wd3eCore.Environment.Shell.Scope.ShellScope.Set(System.Object,System.Object)">
            <summary>
            将共享项设置为当前shell的作用域。
            </summary>
        </member>
        <member name="M:Wd3eCore.Environment.Shell.Scope.ShellScope.Get(System.Object)">
            <summary>
            从当前shell的作用域获取共享项。
            </summary>
        </member>
        <member name="M:Wd3eCore.Environment.Shell.Scope.ShellScope.Get``1(System.Object)">
            <summary>
            从当前shell的作用域获取给定类型的共享项。
            </summary>
        </member>
        <member name="M:Wd3eCore.Environment.Shell.Scope.ShellScope.GetOrCreate``1(System.Object,System.Func{``0})">
            <summary>
            从当前shell的作用域获取(或创建)给定类型的共享项。
            </summary>
        </member>
        <member name="M:Wd3eCore.Environment.Shell.Scope.ShellScope.GetOrCreate``1(System.Object)">
            <summary>
            从当前shell的作用域获取(或创建)给定类型的共享项。
            </summary>
        </member>
        <member name="M:Wd3eCore.Environment.Shell.Scope.ShellScope.SetFeature``1(``0)">
            <summary>
            将共享功能设置为当前shell的作用域。
            </summary>
        </member>
        <member name="M:Wd3eCore.Environment.Shell.Scope.ShellScope.GetFeature``1">
            <summary>
            从当前shell的作用域获取共享特性。
            </summary>
        </member>
        <member name="M:Wd3eCore.Environment.Shell.Scope.ShellScope.GetOrCreateFeature``1(System.Func{``0})">
            <summary>
            从当前shell的作用域获取(或创建)共享特性。
            </summary>
        </member>
        <member name="M:Wd3eCore.Environment.Shell.Scope.ShellScope.GetOrCreateFeature``1">
             <summary>
            从当前shell的作用域获取(或创建)共享特性。
             </summary>
        </member>
        <member name="M:Wd3eCore.Environment.Shell.Scope.ShellScope.CreateChildScopeAsync">
            <summary>
            从当前shell的作用域创建子作用域。
            </summary>
        </member>
        <member name="M:Wd3eCore.Environment.Shell.Scope.ShellScope.CreateChildScopeAsync(Wd3eCore.Environment.Shell.ShellSettings)">
            <summary>
            从当前shell的作用域创建子作用域。
            </summary>
        </member>
        <member name="M:Wd3eCore.Environment.Shell.Scope.ShellScope.CreateChildScopeAsync(System.String)">
            <summary>
            从当前shell的作用域创建子作用域。
            </summary>
        </member>
        <member name="M:Wd3eCore.Environment.Shell.Scope.ShellScope.UsingChildScopeAsync(System.Func{Wd3eCore.Environment.Shell.Scope.ShellScope,System.Threading.Tasks.Task})">
            <summary>
            使用从当前作用域创建的子作用域执行委托。
            </summary>
        </member>
        <member name="M:Wd3eCore.Environment.Shell.Scope.ShellScope.UsingChildScopeAsync(Wd3eCore.Environment.Shell.ShellSettings,System.Func{Wd3eCore.Environment.Shell.Scope.ShellScope,System.Threading.Tasks.Task})">
            <summary>
            使用从当前作用域创建的子作用域执行委托。
            </summary>
        </member>
        <member name="M:Wd3eCore.Environment.Shell.Scope.ShellScope.UsingChildScopeAsync(System.String,System.Func{Wd3eCore.Environment.Shell.Scope.ShellScope,System.Threading.Tasks.Task})">
            <summary>
            使用从当前作用域创建的子作用域执行委托。
            </summary>
        </member>
        <member name="M:Wd3eCore.Environment.Shell.Scope.ShellScope.StartAsyncFlow">
            <summary>
            开始在异步流中保持这个shell作用域。
            </summary>
        </member>
        <member name="M:Wd3eCore.Environment.Shell.Scope.ShellScope.UsingAsync(System.Func{Wd3eCore.Environment.Shell.Scope.ShellScope,System.Threading.Tasks.Task})">
            <summary>
            使用此shell作用域执行委托。
            </summary>
        </member>
        <member name="M:Wd3eCore.Environment.Shell.Scope.ShellScope.ActivateShellAsync">
            <summary>
            如果尚未完成，则通过调用相关的租户事件处理程序来激活shell。
            </summary>
        </member>
        <member name="M:Wd3eCore.Environment.Shell.Scope.ShellScope.BeforeDispose(System.Func{Wd3eCore.Environment.Shell.Scope.ShellScope,System.Threading.Tasks.Task})">
            <summary>
            在此作用域上调用“BeforeDisposeAsync()”时，注册要调用的委托。
            </summary>
        </member>
        <member name="M:Wd3eCore.Environment.Shell.Scope.ShellScope.DeferredSignal(System.String)">
            <summary>
            在'BeforeDisposeAsync()'之后添加一个信号（如果还没有的话）。
            </summary>
        </member>
        <member name="M:Wd3eCore.Environment.Shell.Scope.ShellScope.DeferredTask(System.Func{Wd3eCore.Environment.Shell.Scope.ShellScope,System.Threading.Tasks.Task})">
             <summary>
            在“BeforeDisposeAsync()”之后添加要在新作用域内执行的任务。
             </summary>
        </member>
        <member name="M:Wd3eCore.Environment.Shell.Scope.ShellScope.RegisterBeforeDispose(System.Func{Wd3eCore.Environment.Shell.Scope.ShellScope,System.Threading.Tasks.Task})">
            <summary>
            注册要在当前shell作用域被释放之前调用的委托。
            </summary>
        </member>
        <member name="M:Wd3eCore.Environment.Shell.Scope.ShellScope.AddDeferredSignal(System.String)">
            <summary>
            添加一个信号(如果还没有出现)，在当前shell作用域被释放之前发送。
            </summary>
        </member>
        <member name="M:Wd3eCore.Environment.Shell.Scope.ShellScope.AddDeferredTask(System.Func{Wd3eCore.Environment.Shell.Scope.ShellScope,System.Threading.Tasks.Task})">
            <summary>
            在当前shell作用域被释放后，添加要在新作用域内执行的任务。
            </summary>
        </member>
        <member name="M:Wd3eCore.Environment.Shell.Scope.ShellScope.TerminateShellAsync">
            <summary>
             通过调用相关的事件处理程序来终止shell，如果shell被释放并处于其最后的作用域内，则调用相关的事件处理程序。
             如果在这个作用域被释放，shell上下文应该被处理掉，且返回true。
            </summary>
        </member>
        <member name="M:Wd3eCore.Environment.Shell.Scope.ShellScopeServices.#ctor(System.IServiceProvider)">
            <summary>
            使“IServiceProvider”知道当前的“ShellScope”。
            </summary>
        </member>
        <member name="T:Wd3eCore.Environment.Shell.ShellContextFeature">
            <summary>
            用于捕捉shell上下文和原始路径信息。
            </summary>
        </member>
        <member name="P:Wd3eCore.Environment.Shell.ShellContextFeature.ShellContext">
            <summary>
            当前shell的上下文。
            </summary>
        </member>
        <member name="P:Wd3eCore.Environment.Shell.ShellContextFeature.OriginalPathBase">
            <summary>
            原有的路径基础。
            </summary>
        </member>
        <member name="P:Wd3eCore.Environment.Shell.ShellContextFeature.OriginalPath">
            <summary>
            原有的路径。
            </summary>
        </member>
        <member name="P:Wd3eCore.Environment.Shell.ShellOptions.ShellsApplicationDataPath">
            <summary>
            根容器
            </summary>
        </member>
        <member name="P:Wd3eCore.Environment.Shell.ShellOptions.ShellsContainerName">
            <summary>
            shells的容器
            </summary>
        </member>
        <member name="T:Wd3eCore.Environment.Shell.ShellSettings">
            <summary>
            代表每个租户存储的最小化字段集。
            这个模型从'IShellSettingsManager'中获得，
            默认情况下，它从'App_Data/tenants.json'文件中读取。
            </summary>
        </member>
        <member name="T:Wd3eCore.Environment.Shell.State.ShellFeatureState">
            <summary>
            表示租户中某个特性的状态。
            </summary>
        </member>
        <member name="T:Wd3eCore.Environment.Shell.State.ShellState">
            <summary>
            表示租户在特定时刻构成的可用特性列表。
            代表了特定时刻的租户所构成的可用特性。
            它用于区分新功能和现有功能，以便触发像安装/解锁这样的事件，而不是只启用/禁用。
            </summary>
        </member>
        <member name="T:Wd3eCore.Localization.CalendarName">
            <summary>
            表示用于日历名称的枚举
            </summary>
        </member>
        <member name="T:Wd3eCore.Localization.CalendarSelectorResult">
            <summary>
            表示所选日历的结果。
            </summary>
        </member>
        <member name="P:Wd3eCore.Localization.CalendarSelectorResult.Priority">
            <summary>
            获取或设置优先级。
            </summary>
        </member>
        <member name="P:Wd3eCore.Localization.CalendarSelectorResult.CalendarName">
            <summary>
            获取或设置日历名称。
            </summary>
        </member>
        <member name="T:Wd3eCore.Localization.ICalendarManager">
            <summary>
            表示用于管理日历的契约。
            </summary>
        </member>
        <member name="M:Wd3eCore.Localization.ICalendarManager.GetCurrentCalendar">
            <summary>
            获取当前日历。
            </summary>
            <returns>当前日历名。</returns>
        </member>
        <member name="T:Wd3eCore.Localization.ICalendarSelector">
            <summary>
            表示用于选择日历的契约。
            </summary>
        </member>
        <member name="M:Wd3eCore.Localization.ICalendarSelector.GetCalendarAsync">
            <summary>
            一个日历。
            </summary>
            <returns>选择的日历。</returns>
        </member>
        <member name="T:Wd3eCore.Localization.ILocalizationService">
            <summary>
            表示本地化服务的契约。
            </summary>
        </member>
        <member name="M:Wd3eCore.Localization.ILocalizationService.GetDefaultCultureAsync">
            <summary>
            返回站点的默认文化。
            </summary>
        </member>
        <member name="M:Wd3eCore.Localization.ILocalizationService.GetSupportedCulturesAsync">
            <summary>
            返回站点支持的所有文化。它还包含默认的区域性。
            </summary>
        </member>
        <member name="T:Wd3eCore.Modules.StartupActionsStartup">
            <summary>
             代表一个由Configure和ConfigureServices lambdas组成的伪Startup 类。
            </summary>
        </member>
        <member name="M:Wd3eCore.Modules.HttpContextExtensions.UseShellScopeServices(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            使 <see cref="P:Microsoft.AspNetCore.Http.HttpContext.RequestServices"/> 取到当前的 <see cref="T:Wd3eCore.Environment.Shell.Scope.ShellScope"/>.
            </summary>
        </member>
        <member name="M:Wd3eCore.Modules.InvokeExtensions.Invoke``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},Microsoft.Extensions.Logging.ILogger)">
            <summary>
            通过捕获非致命异常并记录它们来安全地调用方法
            </summary>
        </member>
        <member name="M:Wd3eCore.Modules.InvokeExtensions.Invoke``2(System.Collections.Generic.IEnumerable{``0},System.Action{``0,``1},``1,Microsoft.Extensions.Logging.ILogger)">
             <summary>
            通过捕获非致命异常并记录它们来安全地调用方法
             </summary>
        </member>
        <member name="M:Wd3eCore.Modules.InvokeExtensions.InvokeAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task},Microsoft.Extensions.Logging.ILogger)">
            <summary>
            通过捕获非致命异常并记录它们来安全地调用方法
            </summary>
        </member>
        <member name="M:Wd3eCore.Modules.InvokeExtensions.InvokeAsync``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1,System.Threading.Tasks.Task},``1,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            通过捕获非致命异常并记录它们来安全地调用方法
            </summary>
        </member>
        <member name="M:Wd3eCore.Modules.InvokeExtensions.InvokeAsync``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1,``2,System.Threading.Tasks.Task},``1,``2,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            通过捕获非致命异常并记录它们来安全地调用方法
            </summary>
        </member>
        <member name="M:Wd3eCore.Modules.InvokeExtensions.InvokeAsync``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1,``2,``3,System.Threading.Tasks.Task},``1,``2,``3,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            通过捕获非致命异常并记录它们来安全地调用方法
            </summary>
        </member>
        <member name="M:Wd3eCore.Modules.InvokeExtensions.InvokeAsync``5(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1,``2,``3,``4,System.Threading.Tasks.Task},``1,``2,``3,``4,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            通过捕获非致命异常并记录它们来安全地调用方法
            </summary>
        </member>
        <member name="M:Wd3eCore.Modules.InvokeExtensions.InvokeAsync``6(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1,``2,``3,``4,``5,System.Threading.Tasks.Task},``1,``2,``3,``4,``5,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            通过捕获非致命异常并记录它们来安全地调用方法
            </summary>
        </member>
        <member name="T:Wd3eCore.Modules.FeatureAttribute">
            <summary>
            可以通过名称将服务或组件的属性与特定特性关联。
            该组件只有在该特性被启用时才会被使用。
            </summary>
        </member>
        <member name="P:Wd3eCore.Modules.FeatureAttribute.FeatureName">
            <summary>
            要分配组件的属性的名称。
            </summary>
        </member>
        <member name="T:Wd3eCore.Modules.FileProviders.EmbeddedDirectoryInfo">
            <summary>
            表示物理文件系统上的目录
            </summary>
        </member>
        <member name="M:Wd3eCore.Modules.FileProviders.EmbeddedDirectoryInfo.#ctor(System.String)">
            <summary>
            初始化<see cref="T:Wd3eCore.Modules.FileProviders.EmbeddedDirectoryInfo"/>的一个实例
            </summary>
            <param name="name">目录</param>
        </member>
        <member name="P:Wd3eCore.Modules.FileProviders.EmbeddedDirectoryInfo.Exists">
            <summary>
            总是true。
            </summary>
        </member>
        <member name="P:Wd3eCore.Modules.FileProviders.EmbeddedDirectoryInfo.Length">
            <summary>
            总是等于-1。
            </summary>
        </member>
        <member name="P:Wd3eCore.Modules.FileProviders.EmbeddedDirectoryInfo.PhysicalPath">
            <summary>
            总是null。
            </summary>
        </member>
        <member name="P:Wd3eCore.Modules.FileProviders.EmbeddedDirectoryInfo.Name">
            <inheritdoc />
        </member>
        <member name="P:Wd3eCore.Modules.FileProviders.EmbeddedDirectoryInfo.LastModified">
            <summary>
            最后写入目录的时间。
            </summary>
        </member>
        <member name="P:Wd3eCore.Modules.FileProviders.EmbeddedDirectoryInfo.IsDirectory">
            <summary>
            总是true。
            </summary>
        </member>
        <member name="M:Wd3eCore.Modules.FileProviders.EmbeddedDirectoryInfo.CreateReadStream">
            <summary>
            总是抛出异常，因为目录上不支持读流。
            </summary>
            <exception cref="T:System.InvalidOperationException">总是被</exception>
            <returns>从来没有返回</returns>
        </member>
        <member name="T:Wd3eCore.Modules.FileProviders.IStaticFileProvider">
            <summary>
            这个自定义<see cref="T:Microsoft.Extensions.FileProviders.IFileProvider"/>实现为istaticfileprovider提供Di注册标识，该标识应该通过UseStaticFiles提供。
            </summary>
        </member>
        <member name="M:Wd3eCore.Modules.FileProviders.NormalizedPaths.ResolveFolderContents(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String}@,System.Collections.Generic.IEnumerable{System.String}@)">
            <summary>
            使用一组文件路径来直接解析给定文件夹下的文件和子文件夹。
            路径需要用'/'作为目录分隔符，并且没有前导的'/'。
            </summary>
        </member>
        <member name="T:Wd3eCore.Modules.IModuleStaticFileProvider">
            <summary>
            这个自定义<see cref="T:Microsoft.Extensions.FileProviders.IFileProvider"/>实现为IStaticFileProviders提供Di注册标识，该标识应该通过UseStaticFiles提供。
            </summary>
        </member>
        <member name="T:Wd3eCore.Modules.IStartup">
            <summary>
            此接口的实现用于初始化模块的服务和HTTP请求管道。
            </summary>
        </member>
        <member name="P:Wd3eCore.Modules.IStartup.Order">
             <summary>
            获取用于命令启动程序配置服务的值。默认值为0。
             </summary>
        </member>
        <member name="P:Wd3eCore.Modules.IStartup.ConfigureOrder">
            <summary>
            获取用于命令启动器构建管道的值。默认值为 "Order "属性。
            </summary>
        </member>
        <member name="M:Wd3eCore.Modules.IStartup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            此方法由运行时调用。使用此方法将服务添加到容器中。
            </summary>
            <param name="services">服务描述符的集合。</param>
        </member>
        <member name="M:Wd3eCore.Modules.IStartup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Routing.IEndpointRouteBuilder,System.IServiceProvider)">
            <summary>
            此方法由运行时调用。使用此方法配置HTTP请求管道。
            </summary>
            <param name="builder"></param>
            <param name="routes"></param>
            <param name="serviceProvider"></param>
        </member>
        <member name="T:Wd3eCore.Modules.Manifest.FeatureAttribute">
            <summary>
            在模块中定义一个特性，可以多次使用。
            如果至少定义了一个特性，则忽略模块默认特性。
            </summary>
        </member>
        <member name="P:Wd3eCore.Modules.Manifest.FeatureAttribute.Id">
            <Summary>特性的标识符</Summary>
        </member>
        <member name="P:Wd3eCore.Modules.Manifest.FeatureAttribute.Name">
            <Summary>
            可读的特性名称。如果没有提供，将使用标识符。
            </Summary>
        </member>
        <member name="P:Wd3eCore.Modules.Manifest.FeatureAttribute.Description">
            <Summary>简要总结一下这个特性。</Summary>
        </member>
        <member name="P:Wd3eCore.Modules.Manifest.FeatureAttribute.Dependencies">
            <Summary>
            特性所依赖的特性列表
            它的驱动程序/处理程序会在依赖关系的驱动/处理程序之后调用。
            </Summary>
        </member>
        <member name="P:Wd3eCore.Modules.Manifest.FeatureAttribute.Priority">
            <Summary>
            不破坏依赖顺序的特性的优先级。
            高者为先 后面的驱动/处理程序被调用。
            </Summary>
        </member>
        <member name="P:Wd3eCore.Modules.Manifest.FeatureAttribute.Category">
            <Summary>
            特性所属的组(按类别)。
            如果没有提供，默认为“Uncategorized”。
            </Summary>
        </member>
        <member name="P:Wd3eCore.Modules.Manifest.FeatureAttribute.DefaultTenantOnly">
             <summary>
            设置为<c>true</c>，只允许默认租户启用/禁用该特性。
             </summary>
        </member>
        <member name="P:Wd3eCore.Modules.Manifest.FeatureAttribute.IsAlwaysEnabled">
            <summary>
            启用后，检查是否不能禁用该特性。默认值为false。
            </summary>
        </member>
        <member name="T:Wd3eCore.Modules.Manifest.ModuleAssetAttribute">
            <summary>
            Maps a module asset to its project location while in debug mode, auto generated on building.
            </summary>
        </member>
        <member name="P:Wd3eCore.Modules.Manifest.ModuleAssetAttribute.Asset">
            <Summary>
            A module asset in the form of '{ModuleAssetPath}|{ProjectAssetPath}'.
            </Summary>
        </member>
        <member name="T:Wd3eCore.Modules.Manifest.ModuleAttribute">
            <summary>
            定义一个由特性组成的模块。
            如果模块只有一个默认功能，可以在这里定义。
            </summary>
        </member>
        <member name="P:Wd3eCore.Modules.Manifest.ModuleAttribute.Id">
            <Summary>
            允许模块项目更改其“AssemblyName”而无需更新代码的逻辑id。如果没有提供，则使用程序集名称。
            </Summary>
        </member>
        <member name="P:Wd3eCore.Modules.Manifest.ModuleAttribute.Author">
            <Summary>开发者的名字。</Summary>
        </member>
        <member name="P:Wd3eCore.Modules.Manifest.ModuleAttribute.Website">
            <Summary>开发人员网站的URL。</Summary>
        </member>
        <member name="P:Wd3eCore.Modules.Manifest.ModuleAttribute.Version">
            <Summary>SemVer格式的版本号。</Summary>
        </member>
        <member name="P:Wd3eCore.Modules.Manifest.ModuleAttribute.Tags">
            <Summary>标签列表。</Summary>
        </member>
        <member name="T:Wd3eCore.Modules.Manifest.ModuleMarkerAttribute">
            <summary>
            将一个程序集标记为指定类型的模块，在构建时自动生成。
            </summary>
        </member>
        <member name="T:Wd3eCore.Modules.Manifest.ModuleNameAttribute">
            <summary>
            列出引用模块的包或项目名，在构建时自动生成。
            </summary>
        </member>
        <member name="P:Wd3eCore.Modules.Manifest.ModuleNameAttribute.Name">
            <Summary>
            引用模块的包或项目名。
            </Summary>
        </member>
        <member name="T:Wd3eCore.Modules.ITimeZone">
            <summary>
            表示一个时区。
            </summary>
        </member>
        <member name="T:Wd3eCore.Modules.ModuleCompositeStaticFileProvider">
            <summary>
            这个自定义<see cref="T:Microsoft.Extensions.FileProviders.IFileProvider"/>实现为IStaticFileProviders提供Di注册标识，该标识应该通过UseStaticFiles提供。
            </summary>
        </member>
        <member name="T:Wd3eCore.Modules.ModuleEmbeddedFileProvider">
            <summary>
            这个自定义的<see cref="T:Microsoft.Extensions.FileProviders.IFileProvider"/>实现提供模块程序集中嵌入文件的文件内容。
            </summary>
        </member>
        <member name="T:Wd3eCore.Modules.ModuleEmbeddedStaticFileProvider">
            <summary>
            这个自定义<see cref="T:Microsoft.Extensions.FileProviders.IFileProvider"/>实现提供模块程序集中嵌入文件的文件内容，其路径位于模块“wwwroot”文件夹下。
            </summary>
        </member>
        <member name="T:Wd3eCore.Modules.ModuleProjectStaticFileProvider">
            <summary>
            这个自定义的<see cref="T:Microsoft.Extensions.FileProviders.IFileProvider"/>实现提供的文件内容，
            其路径在模块项目 "wwwroot "文件夹下的文件，在开发环境中时，提供的文件内容。
            </summary>
        </member>
        <member name="T:Wd3eCore.Modules.RequireFeaturesAttribute">
            <summary>
            当在一个类上使用时，只有在特定的特性被启用时，它才会包含服务。
            </summary>
        </member>
        <member name="P:Wd3eCore.Modules.RequireFeaturesAttribute.RequiredFeatureNames">
            <summary>
            所需特性的名称。
            </summary>
        </member>
        <member name="M:Wd3eCore.Modules.ClockExtensions.ConvertToTimeZone(Wd3eCore.Modules.IClock,System.DateTime,Wd3eCore.Modules.ITimeZone)">
            <summary>
            将<see cref="T:System.DateTime" />转换为指定的<see cref="T:Wd3eCore.Modules.ITimeZone" />实例。
            </summary>
        </member>
        <member name="M:Wd3eCore.Modules.ClockExtensions.ConvertToLocalAsync(Wd3eCore.Modules.ILocalClock,System.DateTime)">
            <summary>
            将<see cref="T:System.DateTime" />转换为指定的<see cref="T:Wd3eCore.Modules.ITimeZone" />实例。
            </summary>
        </member>
        <member name="T:Wd3eCore.Modules.IClock">
            <summary>
            提供当前Utc<see cref="T:System.DateTime"/>，以及与时区相关的方法。
            只要需要当前日期和时间，就应该使用此服务，而不是直接使用<seealso cref="T:System.DateTime"/>。
            如果需要本地日期时间和时区，可以使用<see cref="T:Wd3eCore.Modules.ILocalClock" />。
            </summary>
        </member>
        <member name="P:Wd3eCore.Modules.IClock.UtcNow">
            <summary>
            获取系统的当前<see cref="T:System.DateTime"/>，用Utc表示
            </summary>
            <remarks>
            <see cref="T:System.DateTime"/>作为这个属性通常用于在UTC中存储当前日期时间，<see cref="T:System.DateTimeOffset" />会影响可用性。
            </remarks>
        </member>
        <member name="M:Wd3eCore.Modules.IClock.GetTimeZones">
            <summary>
            返回所有可用的<see cref="T:Wd3eCore.Modules.ITimeZone" />.
            </summary>
        </member>
        <member name="M:Wd3eCore.Modules.IClock.GetTimeZone(System.String)">
            <summary>
             返回一个时区ID的 <see cref="T:Wd3eCore.Modules.ITimeZone" />，如果没有找到，则返回本地系统的时区ID。
            </summary>
        </member>
        <member name="M:Wd3eCore.Modules.IClock.GetSystemTimeZone">
            <summary>
            返回系统的默认<see cref="T:Wd3eCore.Modules.ITimeZone" />。
            </summary>
        </member>
        <member name="M:Wd3eCore.Modules.IClock.ConvertToTimeZone(System.DateTimeOffset,Wd3eCore.Modules.ITimeZone)">
            <summary>
            将<see cref="T:System.DateTimeOffset" />转换为指定的<see cref="T:Wd3eCore.Modules.ITimeZone" />实例。
            </summary>
        </member>
        <member name="T:Wd3eCore.Modules.ILocalClock">
            <summary>
            提供当前时间和时区的本地值。
            </summary>
        </member>
        <member name="P:Wd3eCore.Modules.ILocalClock.LocalNowAsync">
            <summary>
            获取本地时区的时间。
            </summary>
        </member>
        <member name="M:Wd3eCore.Modules.ILocalClock.GetLocalTimeZoneAsync">
            <summary>
            返回本地时区。
            </summary>
        </member>
        <member name="M:Wd3eCore.Modules.ILocalClock.ConvertToLocalAsync(System.DateTimeOffset)">
            <summary>
            将<see cref="T:System.DateTimeOffset" />转换为指定的<see cref="T:Wd3eCore.Modules.ITimeZone" />实例。
            </summary>
        </member>
        <member name="M:Wd3eCore.Modules.ILocalClock.ConvertToUtcAsync(System.DateTime)">
            <summary>
            将表示本地时间的<see cref="T:System.DateTime" />转换为UTC值。
            </summary>
        </member>
        <member name="T:Wd3eCore.Modules.ITimeZoneSelector">
            <summary>
            为当前请求提供时区。
            </summary>
        </member>
        <member name="P:Wd3eCore.Modules.StartupBase.Order">
            <inheritdoc />
        </member>
        <member name="P:Wd3eCore.Modules.StartupBase.ConfigureOrder">
            <inheritdoc />
        </member>
        <member name="M:Wd3eCore.Modules.StartupBase.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <inheritdoc />
        </member>
        <member name="M:Wd3eCore.Modules.StartupBase.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Routing.IEndpointRouteBuilder,System.IServiceProvider)">
            <inheritdoc />
        </member>
        <member name="T:Wd3eCore.Routing.IShellRouteValuesAddressScheme">
            <summary>
            标记接口，用于检索用于链接生成的租户 "RouteValuesAddress "方案。
            </summary>
        </member>
        <member name="T:Wd3eCore.Routing.ShellRouteValuesAddressScheme">
            <summary>
            允许租户添加自己的“RouteValuesAddress”方案，用于生成链接。
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.Wd3eCoreBuilder.ConfigureServices(System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection,System.IServiceProvider},System.Int32)">
            <summary>
            为每个租户调用此方法。使用此方法将服务添加到容器中。
            </summary>
            <param name="configure">为租户配置服务时要执行的操作.</param>
            <param name="order">执行动作的顺序。较低的值将首先执行。</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.Wd3eCoreBuilder.ConfigureServices(System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection},System.Int32)">
            <summary>
            为每个租户调用此方法。使用此方法将服务添加到容器中。
            </summary>
            <param name="configure">为租户配置服务时要执行的操作。</param>
            <param name="order">执行动作的顺序。较低的值将首先执行。</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.Wd3eCoreBuilder.Configure(System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Routing.IEndpointRouteBuilder,System.IServiceProvider},System.Int32)">
            <summary>
            为每个租户调用此方法。使用此方法配置请求的管道。
            </summary>
            <param name="configure">为租户配置请求的管道时要执行的操作。</param>
            <param name="order">执行动作的顺序。较低的值将首先执行。</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.Wd3eCoreBuilder.Configure(System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Routing.IEndpointRouteBuilder},System.Int32)">
            <summary>
            为每个租户调用此方法。使用此方法配置请求的管道。
            </summary>
            <param name="configure">为租户配置请求的管道时要执行的操作。</param>
            <param name="order">执行动作的顺序。较低的值将首先执行。</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.Wd3eCoreBuilder.Configure(System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder},System.Int32)">
            <summary>
            为每个租户调用此方法。使用此方法配置请求的管道。
            </summary>
            <param name="configure">为租户配置请求的管道时要执行的操作。</param>
            <param name="order">执行动作的顺序。较低的值将首先执行。</param>
        </member>
    </members>
</doc>
